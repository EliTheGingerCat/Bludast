{"searchDocs":[{"title":"AstExpr","type":0,"sectionRef":"#","url":"/Bludast/api/AstExpr","content":"AstExpr An expression is any combination of variables, constants, and operators that evaluates to a single value.","keywords":"","version":null},{"title":"AstArgumentName","type":0,"sectionRef":"#","url":"/Bludast/api/AstArgumentName","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstArgumentName","url":"/Bludast/api/AstArgumentName#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstArgumentName","url":"/Bludast/api/AstArgumentName#new","content":"&lt;/&gt; AstArgumentName.new( name: AstName, location: Location ) → AstArgumentName  ","version":null,"tagName":"h3"},{"title":"AstExprCall","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprCall","content":"AstExprCall","keywords":"","version":null},{"title":"AstAttr","type":0,"sectionRef":"#","url":"/Bludast/api/AstAttr","content":"AstAttr","keywords":"","version":null},{"title":"AstExprConstantBool","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprConstantBool","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprConstantBool","url":"/Bludast/api/AstExprConstantBool#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprConstantBool","url":"/Bludast/api/AstExprConstantBool#new","content":"&lt;/&gt; AstExprConstantBool.new( location: Location, value: boolean ) → AstExprConstantBool  ","version":null,"tagName":"h3"},{"title":"AstDeclaredClassProp","type":0,"sectionRef":"#","url":"/Bludast/api/AstDeclaredClassProp","content":"AstDeclaredClassProp Struct from /Ast/include/Luau/Ast.h","keywords":"","version":null},{"title":"AstExprBinary","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprBinary","content":"AstExprBinary class Class from /Ast/src/Ast.cpp and /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"AstExprFunction","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprFunction","content":"AstExprFunction","keywords":"","version":null},{"title":"AstExprConstantNumber","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprConstantNumber","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprConstantNumber","url":"/Bludast/api/AstExprConstantNumber#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprConstantNumber","url":"/Bludast/api/AstExprConstantNumber#new","content":"&lt;/&gt; AstExprConstantNumber.new(location: Location) → AstExprConstantNumber  ","version":null,"tagName":"h3"},{"title":"AstExprError","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprError","content":"AstExprError","keywords":"","version":null},{"title":"AstExprConstantString","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprConstantString","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprConstantString","url":"/Bludast/api/AstExprConstantString#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprConstantString","url":"/Bludast/api/AstExprConstantString#new","content":"&lt;/&gt; AstExprConstantString.new( location: Location, value: string, quoteStyle: number? ) → AstExprConstantString  ","version":null,"tagName":"h3"},{"title":"AstExprConstantNil","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprConstantNil","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprConstantNil","url":"/Bludast/api/AstExprConstantNil#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprConstantNil","url":"/Bludast/api/AstExprConstantNil#new","content":"&lt;/&gt; AstExprConstantNil.new(location: Location) → AstExprConstantNil  ","version":null,"tagName":"h3"},{"title":"AstExprIndexExpr","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprIndexExpr","content":"AstExprIndexExpr class","keywords":"","version":null},{"title":"AstExprGroup","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprGroup","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprGroup","url":"/Bludast/api/AstExprGroup#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprGroup","url":"/Bludast/api/AstExprGroup#new","content":"&lt;/&gt; AstExprGroup.new( location: Location, expr: Expr ) → AstExprGroup  ","version":null,"tagName":"h3"},{"title":"AstExprIndexName","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprIndexName","content":"AstExprIndexName","keywords":"","version":null},{"title":"AstExprTable","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprTable","content":"AstExprTable","keywords":"","version":null},{"title":"AstExprLocal","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprLocal","content":"AstExprLocal","keywords":"","version":null},{"title":"AstExprGlobal","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprGlobal","content":"AstExprGlobal","keywords":"","version":null},{"title":"AstExprIfElse","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprIfElse","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprIfElse","url":"/Bludast/api/AstExprIfElse#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprIfElse","url":"/Bludast/api/AstExprIfElse#new","content":"&lt;/&gt; AstExprIfElse.new( location: Location, condition: AstExpr, hasThen: boolean, trueExpr: AstExpr, hasElse: boolean, falseExpr: AstExpr ) → AstExprIfElse  ","version":null,"tagName":"h3"},{"title":"AstExprTable_Item","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprTable_Item","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprTable_Item","url":"/Bludast/api/AstExprTable_Item#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprTable_Item","url":"/Bludast/api/AstExprTable_Item#new","content":"since v0.1.0 &lt;/&gt; AstExprTable_Item.new( kind: number, key: AstExpr?, value: AstExpr ) → AstExprTable_Item  ","version":null,"tagName":"h3"},{"title":"AstExprUnary","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprUnary","content":"AstExprUnary Class from /Ast/src/Ast.cpp and /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"AstGenericTypePack","type":0,"sectionRef":"#","url":"/Bludast/api/AstGenericTypePack","content":"AstGenericTypePack Struct from /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"AstExprInterpString","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprInterpString","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprInterpString","url":"/Bludast/api/AstExprInterpString#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprInterpString","url":"/Bludast/api/AstExprInterpString#new","content":"&lt;/&gt; AstExprInterpString.new( location: Location, strings: {string}, expressions: {AstExpr} ) → AstExprInterpString  ","version":null,"tagName":"h3"},{"title":"AstExprTypeAssertion","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprTypeAssertion","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprTypeAssertion","url":"/Bludast/api/AstExprTypeAssertion#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprTypeAssertion","url":"/Bludast/api/AstExprTypeAssertion#new","content":"&lt;/&gt; AstExprTypeAssertion.new( location: Location, expr: AstExpr, annotation: AstType ) → AstExprTypeAssertion  ","version":null,"tagName":"h3"},{"title":"AstGenericType","type":0,"sectionRef":"#","url":"/Bludast/api/AstGenericType","content":"AstGenericType Struct from /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"AstLocal","type":0,"sectionRef":"#","url":"/Bludast/api/AstLocal","content":"AstLocal","keywords":"","version":null},{"title":"AstStatBlock","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatBlock","content":"AstStatBlock Class from root/Ast/src/Ast.cpp.","keywords":"","version":null},{"title":"AstStat","type":0,"sectionRef":"#","url":"/Bludast/api/AstStat","content":"AstStat","keywords":"","version":null},{"title":"AstName","type":0,"sectionRef":"#","url":"/Bludast/api/AstName","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#properties","content":" ","version":null,"tagName":"h2"},{"title":"value​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#value","content":"since v0.1.0 &lt;/&gt; AstName.value: string  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#new","content":"&lt;/&gt; AstName.new(value: string?) → AstName   ","version":null,"tagName":"h3"},{"title":"__eq​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#__eq","content":"metamethod &lt;/&gt; AstName:__eq(rhs: AstName) → boolean   ","version":null,"tagName":"h3"},{"title":"__lt​","type":1,"pageTitle":"AstName","url":"/Bludast/api/AstName#__lt","content":"metamethod &lt;/&gt; AstName:__lt(rhs: AstName) → boolean  ","version":null,"tagName":"h3"},{"title":"AstExprVarargs","type":0,"sectionRef":"#","url":"/Bludast/api/AstExprVarargs","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstExprVarargs","url":"/Bludast/api/AstExprVarargs#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstExprVarargs","url":"/Bludast/api/AstExprVarargs#new","content":"&lt;/&gt; AstExprVarargs.new(location: Location) → AstExprVarargs   ","version":null,"tagName":"h3"},{"title":"visit​","type":1,"pageTitle":"AstExprVarargs","url":"/Bludast/api/AstExprVarargs#visit","content":"&lt;/&gt; AstExprVarargs:visit(visitor: AstVisitor) → ()   ","version":null,"tagName":"h3"},{"title":"visit​","type":1,"pageTitle":"AstExprVarargs","url":"/Bludast/api/AstExprVarargs#visit","content":"&lt;/&gt; AstExprVarargs:visit(visitor: AstVisitor) → ()   ","version":null,"tagName":"h3"},{"title":"visit​","type":1,"pageTitle":"AstExprVarargs","url":"/Bludast/api/AstExprVarargs#visit","content":"&lt;/&gt; AstExprVarargs:visit(visitor: AstVisitor) → ()  ","version":null,"tagName":"h3"},{"title":"AstNameTable_Entry","type":0,"sectionRef":"#","url":"/Bludast/api/AstNameTable_Entry","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstNameTable_Entry","url":"/Bludast/api/AstNameTable_Entry#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstNameTable_Entry","url":"/Bludast/api/AstNameTable_Entry#new","content":"&lt;/&gt; AstNameTable_Entry.new( value: AstName, length: number, typeLex: number ) → Entry   ","version":null,"tagName":"h3"},{"title":"__eq​","type":1,"pageTitle":"AstNameTable_Entry","url":"/Bludast/api/AstNameTable_Entry#__eq","content":"metamethod &lt;/&gt; AstNameTable_Entry:__eq(other: Entry) → boolean  ","version":null,"tagName":"h3"},{"title":"AstStatBreak","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatBreak","content":"AstStatBreak","keywords":"","version":null},{"title":"AstStatDeclareClass","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatDeclareClass","content":"AstStatDeclareClass","keywords":"","version":null},{"title":"AstStatContinue","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatContinue","content":"AstStatContinue","keywords":"","version":null},{"title":"AstStatCompoundAssign","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatCompoundAssign","content":"AstStatCompoundAssign","keywords":"","version":null},{"title":"AstStatDeclareGlobal","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatDeclareGlobal","content":"AstStatDeclareGlobal","keywords":"","version":null},{"title":"AstStatAssign","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatAssign","content":"AstStatAssign","keywords":"","version":null},{"title":"AstNameTable","type":0,"sectionRef":"#","url":"/Bludast/api/AstNameTable","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#functions","content":" ","version":null,"tagName":"h2"},{"title":"addStatic​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#addStatic","content":"since v0.1.0 &lt;/&gt; AstNameTable:addStatic( name: string, lexType: TypeEnum ) → AstName   ","version":null,"tagName":"h3"},{"title":"getOrAddWithType​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#getOrAddWithType","content":"since v0.1.0 &lt;/&gt; AstNameTable:getOrAddWithType( name: string, length: number ) → Pair&lt;AstName,TypeEnum&gt;   ","version":null,"tagName":"h3"},{"title":"getWithType​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#getWithType","content":"since v0.1.0 &lt;/&gt; AstNameTable:getWithType( name: string, length: number ) → Pair&lt;AstName,TypeEnum&gt;   ","version":null,"tagName":"h3"},{"title":"getOrAdd​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#getOrAdd","content":"since v0.1.0 &lt;/&gt; AstNameTable:getOrAdd(name: string) → AstName   ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"AstNameTable","url":"/Bludast/api/AstNameTable#get","content":"since v0.1.0 &lt;/&gt; AstNameTable:get(name: string) → AstName  ","version":null,"tagName":"h3"},{"title":"AstStatExpr","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatExpr","content":"AstStatExpr","keywords":"","version":null},{"title":"AstStatError","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatError","content":"AstStatError","keywords":"","version":null},{"title":"AstStatDeclareFunction","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatDeclareFunction","content":"AstStatDeclareFunction Class from /Ast/src/Ast.cpp and /Ast/include/Luau/Ast.h. This is a nicer syntax for global declarations that are functions. Example: declare function print(...: any): () ","keywords":"","version":null},{"title":"AstStatForIn","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatForIn","content":"AstStatForIn","keywords":"","version":null},{"title":"AstStatFunction","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatFunction","content":"AstStatFunction","keywords":"","version":null},{"title":"AstStatLocalFunction","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatLocalFunction","content":"AstStatLocalFunction Class from /Ast/src/Ast.cpp and /Ast/include/Luau/Ast.h. local function name() -- body end ","keywords":"","version":null},{"title":"AstStatTypeAlias","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatTypeAlias","content":"AstStatTypeAlias","keywords":"","version":null},{"title":"AstTableAccess","type":0,"sectionRef":"#","url":"/Bludast/api/AstTableAccess","content":"AstTableAccess enum class For some reason binary numbers are used.","keywords":"","version":null},{"title":"AstStatRepeat","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatRepeat","content":"AstStatRepeat","keywords":"","version":null},{"title":"AstStatLocal","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatLocal","content":"AstStatLocal","keywords":"","version":null},{"title":"AstStatWhile","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatWhile","content":"AstStatWhile","keywords":"","version":null},{"title":"AstTableIndexer","type":0,"sectionRef":"#","url":"/Bludast/api/AstTableIndexer","content":"AstTableIndexer","keywords":"","version":null},{"title":"AstTableProp","type":0,"sectionRef":"#","url":"/Bludast/api/AstTableProp","content":"AstTableProp","keywords":"","version":null},{"title":"AstStatFor","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatFor","content":"AstStatFor","keywords":"","version":null},{"title":"AstStatReturn","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatReturn","content":"AstStatReturn","keywords":"","version":null},{"title":"AstTypeError","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeError","content":"AstTypeError","keywords":"","version":null},{"title":"AstTypeFunction","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeFunction","content":"AstTypeFunction class Class from /Ast/src/Ast.cpp and /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"AstStatIf","type":0,"sectionRef":"#","url":"/Bludast/api/AstStatIf","content":"AstStatIf","keywords":"","version":null},{"title":"AstNode","type":0,"sectionRef":"#","url":"/Bludast/api/AstNode","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#types","content":" ","version":null,"tagName":"h2"},{"title":"class​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#class","content":"&lt;/&gt; type class = { ClassIndex: number, ClassType: T } Used in is and as. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#properties","content":" ","version":null,"tagName":"h2"},{"title":"classIndex​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#classIndex","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; AstNode.classIndex: number Used in is and as.  ","version":null,"tagName":"h3"},{"title":"location​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#location","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; AstNode.location: Location  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#new","content":"&lt;/&gt; AstNode.new( classIndex: number, location: Location.Location ) → AstNode   ","version":null,"tagName":"h3"},{"title":"visit​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#visit","content":"since v0.1.0 &lt;/&gt; AstNode:visit(visitor: AstVisitor) → ()   ","version":null,"tagName":"h3"},{"title":"asStat​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#asStat","content":"since v0.1.0 &lt;/&gt; AstNode:asStat() → AstStat Returns self. This is essentially a type assertion.  ","version":null,"tagName":"h3"},{"title":"asType​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#asType","content":"since v0.1.0 &lt;/&gt; AstNode:asType() → AstType Same as asStat.  ","version":null,"tagName":"h3"},{"title":"asAttr​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#asAttr","content":"since v0.1.0 &lt;/&gt; AstNode:asAttr() → AstAttr Same as asStat.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#is","content":"&lt;/&gt; AstNode:is(class: class&lt;any&gt;) → boolean-- Whether the class of self is class.   ","version":null,"tagName":"h3"},{"title":"as​","type":1,"pageTitle":"AstNode","url":"/Bludast/api/AstNode#as","content":"&lt;/&gt; AstNode:as(class: class&lt;T&gt;) → T?-- self if its class is class, nil otherwise  ","version":null,"tagName":"h3"},{"title":"AstTypePack","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypePack","content":"AstTypePack Class from /Ast/include/Luau/Ast.h. This is literally just a wrapper for AstNode.","keywords":"","version":null},{"title":"AstTypePackVariadic","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypePackVariadic","content":"AstTypePackVariadic","keywords":"","version":null},{"title":"AstType","type":0,"sectionRef":"#","url":"/Bludast/api/AstType","content":"AstType","keywords":"","version":null},{"title":"AstTypeOrPack","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeOrPack","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstTypeOrPack","url":"/Bludast/api/AstTypeOrPack#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstTypeOrPack","url":"/Bludast/api/AstTypeOrPack#new","content":"&lt;/&gt; AstTypeOrPack.new( typeAst: AstType, typePack: AstTypePack ) → AstTypeOrPack  ","version":null,"tagName":"h3"},{"title":"AstTypeIntersection","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeIntersection","content":"AstTypeIntersection","keywords":"","version":null},{"title":"AstTypeList","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeList","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstTypeList","url":"/Bludast/api/AstTypeList#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstTypeList","url":"/Bludast/api/AstTypeList#new","content":"&lt;/&gt; AstTypeList.new( types: {AstType}, tailType: AstTypePack? ) → AstTypeList  ","version":null,"tagName":"h3"},{"title":"AstTypePackGeneric","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypePackGeneric","content":"AstTypePackGeneric","keywords":"","version":null},{"title":"AstTypeTable","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeTable","content":"AstTypeTable","keywords":"","version":null},{"title":"AstTypeReference","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeReference","content":"AstTypeReference","keywords":"","version":null},{"title":"AstTypePackExplicit","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypePackExplicit","content":"AstTypePackExplicit","keywords":"","version":null},{"title":"AstTypeSingletonBool","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeSingletonBool","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstTypeSingletonBool","url":"/Bludast/api/AstTypeSingletonBool#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstTypeSingletonBool","url":"/Bludast/api/AstTypeSingletonBool#new","content":"&lt;/&gt; AstTypeSingletonBool.new() → ()  ","version":null,"tagName":"h3"},{"title":"AstTypeSingletonString","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeSingletonString","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstTypeSingletonString","url":"/Bludast/api/AstTypeSingletonString#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AstTypeSingletonString","url":"/Bludast/api/AstTypeSingletonString#new","content":"&lt;/&gt; AstTypeSingletonString.new() → ()  ","version":null,"tagName":"h3"},{"title":"AstTypeUnion","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeUnion","content":"AstTypeUnion","keywords":"","version":null},{"title":"AstTypeTypeof","type":0,"sectionRef":"#","url":"/Bludast/api/AstTypeTypeof","content":"AstTypeTypeof","keywords":"","version":null},{"title":"AstUtilities","type":0,"sectionRef":"#","url":"/Bludast/api/AstUtilities","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstUtilities","url":"/Bludast/api/AstUtilities#functions","content":" ","version":null,"tagName":"h2"},{"title":"visitTypeList​","type":1,"pageTitle":"AstUtilities","url":"/Bludast/api/AstUtilities#visitTypeList","content":"&lt;/&gt; AstUtilities.visitTypeList( visitor: AstVisitor, list: AstTypeList ) → ()   ","version":null,"tagName":"h3"},{"title":"getIdentifier​","type":1,"pageTitle":"AstUtilities","url":"/Bludast/api/AstUtilities#getIdentifier","content":"&lt;/&gt; AstUtilities.getIdentifier(node: AstExpr) → AstName  ","version":null,"tagName":"h3"},{"title":"AstVisitor","type":0,"sectionRef":"#","url":"/Bludast/api/AstVisitor","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AstVisitor","url":"/Bludast/api/AstVisitor#functions","content":" ","version":null,"tagName":"h2"},{"title":"visit​","type":1,"pageTitle":"AstVisitor","url":"/Bludast/api/AstVisitor#visit","content":"since v0.1.0 &lt;/&gt; AstVisitor:visit(node: AstNode) → boolean-- Whether subnodes contained in node should be visited.  ","version":null,"tagName":"h3"},{"title":"BytecodeBuilder","type":0,"sectionRef":"#","url":"/Bludast/api/BytecodeBuilder","content":"BytecodeBuilder","keywords":"","version":null},{"title":"HotComment","type":0,"sectionRef":"#","url":"/Bludast/api/HotComment","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"HotComment","url":"/Bludast/api/HotComment#properties","content":" ","version":null,"tagName":"h2"},{"title":"header​","type":1,"pageTitle":"HotComment","url":"/Bludast/api/HotComment#header","content":"&lt;/&gt; HotComment.header: boolean Whether the comment is part of the header of the file. This is false for all hot comments that appear after the first piece of non-comment code in a file.  ","version":null,"tagName":"h3"},{"title":"location​","type":1,"pageTitle":"HotComment","url":"/Bludast/api/HotComment#location","content":"&lt;/&gt; HotComment.location: Location   ","version":null,"tagName":"h3"},{"title":"content​","type":1,"pageTitle":"HotComment","url":"/Bludast/api/HotComment#content","content":"&lt;/&gt; HotComment.content: string  ","version":null,"tagName":"h3"},{"title":"ConstantNumberParseResult","type":0,"sectionRef":"#","url":"/Bludast/api/ConstantNumberParseResult","content":"ConstantNumberParseResult Enum class from /Ast/include/Luau/Ast.h.","keywords":"","version":null},{"title":"NumberUtilities","type":0,"sectionRef":"#","url":"/Bludast/api/NumberUtilities","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"NumberUtilities","url":"/Bludast/api/NumberUtilities#functions","content":" ","version":null,"tagName":"h2"},{"title":"unsigned​","type":1,"pageTitle":"NumberUtilities","url":"/Bludast/api/NumberUtilities#unsigned","content":"&lt;/&gt; NumberUtilities.unsigned(n: number) → number Performs wrap around so that the result will always be positive and less than the maximum u32 value. ","version":null,"tagName":"h3"},{"title":"FastVariables","type":0,"sectionRef":"#","url":"/Bludast/api/FastVariables","content":"FastVariables Luau flags that can be changed to quickly revert an update. These flags are found all over C++ files.","keywords":"","version":null},{"title":"Lexer","type":0,"sectionRef":"#","url":"/Bludast/api/Lexer","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Lexer","url":"/Bludast/api/Lexer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Lexer","url":"/Bludast/api/Lexer#new","content":"&lt;/&gt; Lexer.new( buffer: string, bufferSize: number, names: AstNameTable ) → Lexer   ","version":null,"tagName":"h3"},{"title":"fixupMultilineString​","type":1,"pageTitle":"Lexer","url":"/Bludast/api/Lexer#fixupMultilineString","content":"&lt;/&gt; Lexer.fixupMultilineString(data: string) → string Lua rules for multiline strings are as follows: standalone \\r, \\r\\n, \\n\\r and \\n are all considered newlines first newline in the multiline string is skipped all other newlines are normalized to \\n Since our lexer just treats \\n as newlines, we apply a simplified set of rules that is sufficient to get normalized newlines for Windows/Unix: \\r\\n and \\n are considered newlines first newline is skipped newlines are normalized to \\n This makes the string parsing behavior consistent with general lexing behavior - a standalone \\r isn't considered a new line from the line tracking perspective.  ","version":null,"tagName":"h3"},{"title":"current​","type":1,"pageTitle":"Lexer","url":"/Bludast/api/Lexer#current","content":"&lt;/&gt; Lexer:current() → Lexeme  ","version":null,"tagName":"h3"},{"title":"ParseErrors","type":0,"sectionRef":"#","url":"/Bludast/api/ParseErrors","content":"ParseErrors","keywords":"","version":null},{"title":"ParseError","type":0,"sectionRef":"#","url":"/Bludast/api/ParseError","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#new","content":"&lt;/&gt; ParseError.new( location: Location, message: string ) → ()   ","version":null,"tagName":"h3"},{"title":"raise​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#raise","content":"since v0.1.0 &lt;/&gt; ParseError.raise( location: Location, format: string, ...: any ) → ()   ","version":null,"tagName":"h3"},{"title":"getLocation​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#getLocation","content":"since v0.1.0 &lt;/&gt; ParseError:getLocation() → Location   ","version":null,"tagName":"h3"},{"title":"getMessage​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#getMessage","content":"since v0.1.0 &lt;/&gt; ParseError:getMessage() → string   ","version":null,"tagName":"h3"},{"title":"what​","type":1,"pageTitle":"ParseError","url":"/Bludast/api/ParseError#what","content":"since v0.1.0 &lt;/&gt; ParseError:what() → string Same as ParseError:getMessage() though in the C++ version it returns the message as a C string. ","version":null,"tagName":"h3"},{"title":"Lexeme","type":0,"sectionRef":"#","url":"/Bludast/api/Lexeme","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#types","content":" ","version":null,"tagName":"h2"},{"title":"TypeEnum​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#TypeEnum","content":"enum &lt;/&gt; interface TypeEnum { Eof: 1, Char_END: 256, Equal: 257, LessEqual: 258, GreaterEqual: 259, NotEqual: 260, Dot2: 261, Dot3: 262, SkinnyArrow: 263, DoubleColon: 264, FloorDiv: 265, InterpStringBegin: 266, InterpStringMid: 267, InterpStringEnd: 268, InterpStringSimple: 269, AddAssign: 270, SubAssign: 271, MulAssign: 272, DivAssign: 273, FloorDivAssign: 274, ModAssign: 275, PowAssign: 276, ConcatAssign: 277, RawString: 278, QuotedString: 279, Number: 280, Name: 281, Comment: 282, BlockComment: 283, Attribute: 284, BrokenString: 285, BrokenComment: 286, BrokenUnicode: 287, BrokenInterpDoubleBrace: 288, Error: 289, Reserved_BEGIN: 290, ReservedAnd: 290, ReservedBreak: 291, ReservedDo: 292, ReservedElse: 293, ReservedElseif: 294, ReservedEnd: 295, ReservedFalse: 296, ReservedFor: 297, ReservedFunction: 298, ReservedIf: 299, ReservedIn: 300, ReservedLocal: 301, ReservedNil: 302, ReservedNot: 303, ReservedOr: 304, ReservedRepeat: 305, ReservedReturn: 306, ReservedThen: 307, ReservedTrue: 308, ReservedUntil: 309, ReservedWhile: 310, Reserved_END: 311 } -- 2..255 means actual character values -- An interpolated string with no expressions (like x) ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#properties","content":" ","version":null,"tagName":"h2"},{"title":"Type​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#Type","content":"&lt;/&gt; Lexeme.Type: TypeEnum   ","version":null,"tagName":"h3"},{"title":"reserved​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#reserved","content":"&lt;/&gt; Lexeme.reserved: {string} All reserved keywords of Lua. Luau soft keywords, like &quot;continue&quot; and &quot;export&quot;, are not contained in this list. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Lexeme","url":"/Bludast/api/Lexeme#new","content":"since v0.1.0 &lt;/&gt; Lexeme.new( location: Location, typeAny: number | string, extra: string?, size: number? ) → Lexeme Arguments can be: Location, TypeEnum Location, single character Location, TypeEnum, string for data, size Location, TypeEnum, string for name ","version":null,"tagName":"h3"},{"title":"Pair","type":0,"sectionRef":"#","url":"/Bludast/api/Pair","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Pair","url":"/Bludast/api/Pair#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Pair","url":"/Bludast/api/Pair#new","content":"since v0.1.0 &lt;/&gt; Pair.new( o1: T1, o2: T2 ) → Pair&lt;T1,T2&gt;  ","version":null,"tagName":"h3"},{"title":"Comment","type":0,"sectionRef":"#","url":"/Bludast/api/Comment","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Comment","url":"/Bludast/api/Comment#properties","content":" ","version":null,"tagName":"h2"},{"title":"type​","type":1,"pageTitle":"Comment","url":"/Bludast/api/Comment#type","content":"&lt;/&gt; Comment.type: number Comment, BlockComment, or BrokenComment  ","version":null,"tagName":"h3"},{"title":"location​","type":1,"pageTitle":"Comment","url":"/Bludast/api/Comment#location","content":"&lt;/&gt; Comment.location: Location  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Comment","url":"/Bludast/api/Comment#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Comment","url":"/Bludast/api/Comment#new","content":"&lt;/&gt; Comment.new( typeLex: number, location: Location.Location ) → ()  ","version":null,"tagName":"h3"},{"title":"Parser_MatchLexeme","type":0,"sectionRef":"#","url":"/Bludast/api/Parser_MatchLexeme","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser_MatchLexeme","url":"/Bludast/api/Parser_MatchLexeme#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Parser_MatchLexeme","url":"/Bludast/api/Parser_MatchLexeme#new","content":"&lt;/&gt; Parser_MatchLexeme.new(l: Lexeme) → Parser_MatchLexeme  ","version":null,"tagName":"h3"},{"title":"Confusables","type":0,"sectionRef":"#","url":"/Bludast/api/Confusables","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Confusables","url":"/Bludast/api/Confusables#functions","content":" ","version":null,"tagName":"h2"},{"title":"findConfusable​","type":1,"pageTitle":"Confusables","url":"/Bludast/api/Confusables#findConfusable","content":"since v0.1.0 &lt;/&gt; Confusables.findConfusable(codepoint: number) → string? Searches through the list to find a string that the developer might have gotten confused with. ","version":null,"tagName":"h3"},{"title":"Parser_Binding","type":0,"sectionRef":"#","url":"/Bludast/api/Parser_Binding","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser_Binding","url":"/Bludast/api/Parser_Binding#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Parser_Binding","url":"/Bludast/api/Parser_Binding#new","content":"&lt;/&gt; Parser_Binding.new( name: Name, annotation: AstType ) → Parser_Binding  ","version":null,"tagName":"h3"},{"title":"Parser_Name","type":0,"sectionRef":"#","url":"/Bludast/api/Parser_Name","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser_Name","url":"/Bludast/api/Parser_Name#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Parser_Name","url":"/Bludast/api/Parser_Name#new","content":"&lt;/&gt; Parser_Name.new( name: AstName, location: Location ) → Parser_Name  ","version":null,"tagName":"h3"},{"title":"Parser_Function","type":0,"sectionRef":"#","url":"/Bludast/api/Parser_Function","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser_Function","url":"/Bludast/api/Parser_Function#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Parser_Function","url":"/Bludast/api/Parser_Function#new","content":"&lt;/&gt; Parser_Function.new() → Parser_Function Initialised to { vararg = false, loopDepth = 0 }  ","version":null,"tagName":"h3"},{"title":"StringUtils","type":0,"sectionRef":"#","url":"/Bludast/api/StringUtils","content":"StringUtils Library from /Ast/src/StringUtils.cpp.","keywords":"","version":null},{"title":"ParseResult","type":0,"sectionRef":"#","url":"/Bludast/api/ParseResult","content":"ParseResult","keywords":"","version":null},{"title":"TempVector","type":0,"sectionRef":"#","url":"/Bludast/api/TempVector","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"TempVector","url":"/Bludast/api/TempVector#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"TempVector","url":"/Bludast/api/TempVector#new","content":"&lt;/&gt; TempVector.new(storage: Vector&lt;T&gt;) → TempVector&lt;T&gt;   ","version":null,"tagName":"h3"},{"title":"destroy​","type":1,"pageTitle":"TempVector","url":"/Bludast/api/TempVector#destroy","content":"&lt;/&gt; TempVector:destroy() → () Ideally this would be hooked up to the __gc metamethod, but that is not supported in Luau, so instead it has to be manually called before returning from a function. ","version":null,"tagName":"h3"},{"title":"Position","type":0,"sectionRef":"#","url":"/Bludast/api/Position","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#properties","content":" ","version":null,"tagName":"h2"},{"title":"line​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#line","content":"since v0.1.0 &lt;/&gt; Position.line: number   ","version":null,"tagName":"h3"},{"title":"column​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#column","content":"since v0.1.0 &lt;/&gt; Position.column: number  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#new","content":"since v0.1.0 &lt;/&gt; Position.new( line: number, column: number ) → Position   ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#is","content":"since v0.1.0 &lt;/&gt; Position.is(object: any) → Position?   ","version":null,"tagName":"h3"},{"title":"__eq​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#__eq","content":"metamethod since v0.1.0 &lt;/&gt; Position:__eq(rhs: Position) → boolean   ","version":null,"tagName":"h3"},{"title":"__lt​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#__lt","content":"metamethod since v0.1.0 &lt;/&gt; Position:__lt(rhs: Position) → boolean   ","version":null,"tagName":"h3"},{"title":"__le​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#__le","content":"metamethod since v0.1.0 &lt;/&gt; Position:__le(rhs: Position) → boolean   ","version":null,"tagName":"h3"},{"title":"shift​","type":1,"pageTitle":"Position","url":"/Bludast/api/Position#shift","content":"since v0.1.0 &lt;/&gt; Position:shift( start: Position, oldEnd: Position, newEnd: Position ) → ()  ","version":null,"tagName":"h3"},{"title":"ParseOptions","type":0,"sectionRef":"#","url":"/Bludast/api/ParseOptions","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#types","content":" ","version":null,"tagName":"h2"},{"title":"ModeEnum​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#ModeEnum","content":"&lt;/&gt; interface ModeEnum { NoCheck: 1-- Do not perform any inference Nonstrict: 2-- Unannotated symbols are any Strict: 3-- Unannotated symbols are inferred Definition: 4-- Type definition module, has special parsing rules }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#properties","content":" ","version":null,"tagName":"h2"},{"title":"Mode​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#Mode","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; ParseOptions.Mode: ModeEnum  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ParseOptions","url":"/Bludast/api/ParseOptions#new","content":"since v0.1.0 &lt;/&gt; ParseOptions.new( allowDeclarationSyntax: boolean?, captureComments: boolean? ) → ParseOptions  ","version":null,"tagName":"h3"},{"title":"Location","type":0,"sectionRef":"#","url":"/Bludast/api/Location","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#properties","content":" ","version":null,"tagName":"h2"},{"title":"begin​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#begin","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; Location.begin: Position   ","version":null,"tagName":"h3"},{"title":"finish​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#finish","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; Location.finish: Position  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#new","content":"since v0.1.0 &lt;/&gt; Location.new( nil: | Position | Location, finish: nil | Position | number | Location ) → Location Arguments can be: nil, nil Position, number Position, Position Location, Location  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#is","content":"since v0.1.0 &lt;/&gt; Location.is(object: any) → Location? Returns the object if it is a Location object.  ","version":null,"tagName":"h3"},{"title":"__eq​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#__eq","content":"metamethod since v0.1.0 &lt;/&gt; Location:__eq(rhs: Location) → boolean Locations can be compared with just the equals sign. local one = Location.new() local two = Location.new() assert(one == two)   ","version":null,"tagName":"h3"},{"title":"encloses​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#encloses","content":"since v0.1.0 &lt;/&gt; Location:encloses(l: Location) → boolean Whether the given Location is fully within self, inclusive.  ","version":null,"tagName":"h3"},{"title":"overlaps​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#overlaps","content":"since v0.1.0 &lt;/&gt; Location:overlaps(l: Location) → boolean Whether the given Location intersects with self at all, inclusive.  ","version":null,"tagName":"h3"},{"title":"contains​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#contains","content":"since v0.1.0 &lt;/&gt; Location:contains(p: Position) → boolean Whether the given Position is within the bounds of self, except that it can not be at self.finish.  ","version":null,"tagName":"h3"},{"title":"containsClosed​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#containsClosed","content":"since v0.1.0 &lt;/&gt; Location:containsClosed(p: Position) → boolean Whether the given Position is within the bounds of self, inclusive.  ","version":null,"tagName":"h3"},{"title":"extend​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#extend","content":"since v0.1.0 &lt;/&gt; Location:extend(other: Location) → () Ensures that both bounds are further than or at other's bounds, respectively.  ","version":null,"tagName":"h3"},{"title":"shift​","type":1,"pageTitle":"Location","url":"/Bludast/api/Location#shift","content":"since v0.1.0 &lt;/&gt; Location:shift( start: Position, oldEnd: Position, newEnd: Position ) → () Shifts both of self's Positions by oldEnd and newEnd. ","version":null,"tagName":"h3"},{"title":"Parser_BinaryOpPriority","type":0,"sectionRef":"#","url":"/Bludast/api/Parser_BinaryOpPriority","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser_BinaryOpPriority","url":"/Bludast/api/Parser_BinaryOpPriority#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Parser_BinaryOpPriority","url":"/Bludast/api/Parser_BinaryOpPriority#new","content":"&lt;/&gt; Parser_BinaryOpPriority.new( left: number, right: number ) → Parser_BinaryOpPriority  ","version":null,"tagName":"h3"},{"title":"Try","type":0,"sectionRef":"#","url":"/Bludast/api/Try","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Try","url":"/Bludast/api/Try#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Try","url":"/Bludast/api/Try#new","content":"since v0.1.0 &lt;/&gt; Try.new(attempt: () → ()) → Try The Try class can also be called directly as a shorthand and it is recommended. try(function() ... end)   ","version":null,"tagName":"h3"},{"title":"catch​","type":1,"pageTitle":"Try","url":"/Bludast/api/Try#catch","content":"since v0.1.0 &lt;/&gt; Try:catch(handler: (issue: any) → ()) → ()  ","version":null,"tagName":"h3"},{"title":"Parser","type":0,"sectionRef":"#","url":"/Bludast/api/Parser","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Parser","url":"/Bludast/api/Parser#functions","content":" ","version":null,"tagName":"h2"},{"title":"parse​","type":1,"pageTitle":"Parser","url":"/Bludast/api/Parser#parse","content":"since v0.1.0 &lt;/&gt; Parser.parse( buffer: string, bufferSize: number, names: AstNameTable, options: ParseOptions ) → ParseResult The primary function of this module which creates a parser and returns its results in a nice table for you. ","version":null,"tagName":"h3"},{"title":"Vector","type":0,"sectionRef":"#","url":"/Bludast/api/Vector","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#new","content":"since v0.1.0 &lt;/&gt; Vector.new() → Vector&lt;any&gt;   ","version":null,"tagName":"h3"},{"title":"reserve​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#reserve","content":"since v0.1.0 &lt;/&gt; Vector.reserve( self: Vector&lt;any&gt;, n: number ) → () Ensure the vector capacity is at least this size.  ","version":null,"tagName":"h3"},{"title":"resize​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#resize","content":"since v0.1.0 &lt;/&gt; Vector.resize( self: Vector&lt;T&gt;, count: number, value: T ) → () Sets the vector size and capacity to count exactly, filling empty spaces with value.  ","version":null,"tagName":"h3"},{"title":"assign​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#assign","content":"since v0.1.0 &lt;/&gt; Vector.assign( self: Vector&lt;any&gt;, n: number, val: any ) → () Essentially table.create.  ","version":null,"tagName":"h3"},{"title":"back​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#back","content":"since v0.1.0 &lt;/&gt; Vector.back(self: Vector&lt;T&gt;) → T Gets the item at the end.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#clear","content":"since v0.1.0 &lt;/&gt; Vector.clear(self: Vector&lt;any&gt;) → ()   ","version":null,"tagName":"h3"},{"title":"empty​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#empty","content":"since v0.1.0 &lt;/&gt; Vector.empty(self: Vector&lt;any&gt;) → boolean   ","version":null,"tagName":"h3"},{"title":"front​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#front","content":"since v0.1.0 &lt;/&gt; Vector.front(self: Vector&lt;T&gt;) → T   ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#get","content":"since v0.1.0 &lt;/&gt; Vector.get( self: Vector&lt;T&gt;, index: number ) → T Use this method to index the inner array. The __index metamethod could be employed instead, but this would ruin typechecking unless methods are typed statically.  ","version":null,"tagName":"h3"},{"title":"size​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#size","content":"since v0.1.0 &lt;/&gt; Vector.size(self: Vector&lt;any&gt;) → number   ","version":null,"tagName":"h3"},{"title":"copy_range​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#copy_range","content":"since v0.1.0 &lt;/&gt; Vector.copy_range( self: Vector&lt;T&gt;, from: number, to: number ) → {T} Returns a copy of the inner data. Only used by TempVector.  ","version":null,"tagName":"h3"},{"title":"data​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#data","content":"since v0.1.0 &lt;/&gt; Vector.data(self: Vector&lt;T&gt;) → {T} Returns the inner array. DANGER The inner array must not be mutated.  ","version":null,"tagName":"h3"},{"title":"push_back​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#push_back","content":"since v0.1.0 &lt;/&gt; Vector.push_back( self: Vector&lt;T&gt;, val: T ) → () Adds a new value at the end.  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#set","content":"since v0.1.0 &lt;/&gt; Vector.set( self: Vector&lt;T&gt;, index: number, value: T ) → ()   ","version":null,"tagName":"h3"},{"title":"set_increment​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#set_increment","content":"since v0.1.0 &lt;/&gt; Vector.set_increment( self: Vector&lt;number&gt;, index: number ) → ()   ","version":null,"tagName":"h3"},{"title":"set_decrement​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#set_decrement","content":"since v0.1.0 &lt;/&gt; Vector.set_decrement( self: Vector&lt;number&gt;, index: number ) → ()   ","version":null,"tagName":"h3"},{"title":"erase​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#erase","content":"since v0.1.0 &lt;/&gt; Vector:erase( first: number, last: number ) → () Overloads: first: number, last: number position: number -- the same as passing erase(position, position) Set an index or a range to empty.  ","version":null,"tagName":"h3"},{"title":"pop_back​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#pop_back","content":"&lt;/&gt; Vector:pop_back() → () Removes the value at the end.  ","version":null,"tagName":"h3"},{"title":"emplace_back​","type":1,"pageTitle":"Vector","url":"/Bludast/api/Vector#emplace_back","content":"since v0.1.0 &lt;/&gt; Vector:emplace_back(val: T) → () Alias for push_back. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}