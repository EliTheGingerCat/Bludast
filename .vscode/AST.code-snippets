{
	// Place your bludast workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"AST class": {
		// Looks like bro uses 4 spaces instead of tab even though I used \t ðŸ˜¾
		"scope": "luau",
		"prefix": "AST class",
		"description": "A class for the parser to use when converting lexemes to an abstract syntax tree.",
		"isFileTemplate": true,
		"body": [
			"local AstClassIndex = require(\"./AstClassIndex\")",
			"local ${2:super} = require(\"./${2:super}\")",
			"local AstVisitor = require(\"./AstVisitor\")",
			"local Location = require(\"@Shared/Location\")",
			"",
			"type ${2:super} = ${2:super}.${2:super}",
			"type AstVisitor = AstVisitor.AstVisitor",
			"type Location = Location.Location",
			"",
			"export type ${1:name} = ${2:super} & {",
			"\t",
			"}",
			"",
			"--[=[",
			"\t@class ${1:name}",
			"]=]",

			"local ${1:name} = {",
			"\tClassIndex = AstClassIndex(),",
			"\tClassType = (nil :: any) :: ${1:name}",
			"}",
			"local prototype = setmetatable({}, ${2:super}.metatable)",
			"local metatable = {__index = prototype}",
			"",
			"--[=[",
			"\t@within ${1:name}",
			"\t@function new",
			"\t@param location Location",
			"\t@return ${1:name}",
			"]=]",
			"function ${1:name}.new(location: Location): ${1:name}",
			"\tlocal self = ${2:super}.interface.new(${1:name}.ClassIndex, location) :: ${1:name}",
			"\tsetmetatable(self, metatable)",
			"\treturn self",
			"end",
			"",
			"--[=[",
			"\t@within AstExprVarargs",
			"\t@method visit",
			"\t@param visitor AstVisitor",
			"]=]",
			"function prototype.visit(self: ${1:name}, visitor: AstVisitor): ()",
			"\tvisitor:visit(self)",
			"end",
			"",
			"return ${1:name}"
		]
	}
}