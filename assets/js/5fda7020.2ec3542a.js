"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7780],{4709:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"The Try class can also be called directly as a shorthand and it is recommended.\\n```lua\\ntry(function()\\n\\t...\\nend)\\n```","params":[{"name":"attempt","desc":"","lua_type":"() -> ()"}],"returns":[{"desc":"","lua_type":"Try"}],"function_type":"static","since":"v0.1.0","source":{"line":55,"path":"src/Ast/Try.luau"}},{"name":"catch","desc":"","params":[{"name":"handler","desc":"","lua_type":"(issue: any) -> ()"}],"returns":[],"function_type":"method","since":"v0.1.0","source":{"line":69,"path":"src/Ast/Try.luau"}}],"properties":[{"name":"_success","desc":"Whether the attempted function was called without errors.","lua_type":"bolean","since":"v0.1.0","private":true,"readonly":true,"source":{"line":14,"path":"src/Ast/Try.luau"}},{"name":"_result","desc":"Any result the attempt returned, only kept for the error handler to use.\\n\\n:::danger\\n\\nOnly the first return is kept; all other values will be discarded.\\n```lua\\ntry(function()\\n\\terror(1, 2, 3)\\nend):catch(function(...)\\n\\tprint(...) -- 1\\nend)\\n```\\n\\n:::","lua_type":"any","since":"v0.1.0","private":true,"readonly":true,"source":{"line":35,"path":"src/Ast/Try.luau"}}],"types":[],"name":"Try","desc":"Syntax sugar for pcall to match the C++ code more closely.","source":{"line":6,"path":"src/Ast/Try.luau"}}')}}]);